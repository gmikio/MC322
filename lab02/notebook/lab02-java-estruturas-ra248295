{"metadata":{"orig_nbformat":4,"kernelspec":{"display_name":"Java","language":"java","name":"java"},"language_info":{"codemirror_mode":"text/x-java","file_extension":".java","mimetype":"","name":"Java","nbconverter_exporter":"","version":"1.8.0_121"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Laboratório em Estruturas de Programação Java\n\nO laboratório a seguir serve para praticar estruturas de programação Java sem compromisso com a orientação a objetos.","metadata":{}},{"cell_type":"markdown","source":"## Desafio 1 - Empréstimo\n\nEm um financiamento com juros compostos e número de parcelas fixas parte-se dos seguintes parâmetros:\n* `S` - valor da primeira parcela\n* `N` - número de parcelas\n* `J` - percentual de juros mensal\n\nA primeira parcela a ser paga do financiamento é sempre igual a `S`. A partir daí é feita uma atualização mensal da parcela, em que cada nova parcela é calculada a partir da parcela do mês anterior, conforme a fórmula:\n\n> Parcela<sub>mês</sub> = Parcela<sub>mês-1</sub> * (1 + `J` / 100)\n\nO financiamento encerra quando as `N` parcelas são pagas.\n\nExemplo:\n* `S`: 200\n* `N`: 5\n* `J`: 1%\n\nParcelas do financiamento:\n`200`; `202`; `204.02`; `206.06`; `208.12`","metadata":{}},{"cell_type":"markdown","source":"### Desafio 1 / Parte 1 - Escrevendo o programa sem módulos\n\nDado o problema descrito, escreva um programa que calcule as parcelas de um empréstimo para os seguintes valores:\n* S: 200\n* N: 5\n* J: 1%\n\nNesta versão não use outro módulo além da função principal.","metadata":{}},{"cell_type":"code","source":"int N = 5;\nfloat S = 200, J = 1;\n\nSystem.out.format(\"%.2f \", S);\nfor (int i = 1; i < N; i++){\n    S = S * (1 + J/100);\n    System.out.format(\"%.2f \", S);\n}","metadata":{"trusted":true},"execution_count":8,"outputs":[{"name":"stdout","text":"200.00 202.00 204.02 206.06 208.12 ","output_type":"stream"},{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"null"},"metadata":{}}]},{"cell_type":"markdown","source":"### Desafio 1 / Parte 2 - Escrevendo módulos\n\nReescreva o código acima de forma que seu programa faça uso de uma função que seja responsável pelo cálculo de uma parcela X do empréstimo. Podem ser usadas mais funções (métodos) conforme a necessidade.","metadata":{}},{"cell_type":"code","source":"public class Juros {\n    static float proximaParcela(float parcela_anterior, float juros) {\n        \n        float parcela = parcela_anterior * (1+juros/100);\n            \n        return parcela;\n    }        \n}","metadata":{"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"com.twosigma.beaker.javash.bkr6187abac.Juros"},"metadata":{}}]},{"cell_type":"code","source":"int S = 200, N = 5;\nfloat parcela = S, J = 1;\n\nSystem.out.format(\"Parcelas do financiamento: %.0f; \", parcela);\n\nfor (int i = 1; i < N; i++){\n    parcela = Juros.proximaParcela(parcela, J);\n    System.out.format (\"%.2f; \", parcela);\n} ","metadata":{"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"Parcelas do financiamento: 200; 202.00; 204.02; 206.06; 208.12; ","output_type":"stream"},{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"null"},"metadata":{}}]},{"cell_type":"markdown","source":"## Desafio 2\n\nEscreva um programa que sorteie um número inteiro entre `0` e `9999` o número deve ser mostrado, em seguida convertido para binário e a versão binária deve ser apresentada no console. A conversão decimal/binário deve ser computada por um programa feito por você.","metadata":{}},{"cell_type":"code","source":"public class Convert{\n    static void to_Binary(int decimal){\n        int vetor[] = new int[128];\n        int divisao_inteira = 1;\n        \n        int i = 0;\n        while (decimal != 0){\n            vetor[i] = decimal % 2;\n            decimal = decimal / 2;\n            i++;\n        }\n        i--;\n        \n        while (i >= 0){\n            System.out.format(\"%d\", vetor[i]);\n            i--;\n        } \n    }\n}","metadata":{"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"com.twosigma.beaker.javash.bkr6187abac.Convert"},"metadata":{}}]},{"cell_type":"code","source":"import java.util.Random;\n\nRandom rand = new Random();\n\nint numero_aleatorio = rand.nextInt(9999);\nSystem.out.format(\"%d\\n\", numero_aleatorio); \n\nConvert.to_Binary(numero_aleatorio); \n\n\n","metadata":{"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"4451\n1000101100011","output_type":"stream"},{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"null"},"metadata":{}}]},{"cell_type":"markdown","source":"## Desafio 3\n\nUma molécula de DNA pode ser definida a partir de uma cadeia que representa a sequência de suas bases:\nA - Adenina\nC - Citisina\nG - Guanina\nT - Tinina\n\nDesse modo, uma string pode ser usada para representar um segmento do DNA da seguinte maneira: `ATTACGCGCAAAC`.\n\nEscreva uma função (método) que codifique a cadeia de RNA produzida a partir de uma cadeia de DNA. A função deve ser genérica o suficiente para ser aplicável a qualquer cadeia. A entrada é uma string (DNA) e o retorno é uma string (RNA).\n\nEscreva um programa que teste esta função com uma cadeia de DNA de sua escolha.","metadata":{}},{"cell_type":"code","source":"public class Transcribe{\n    static String dna_to_Rna(String dna_base){\n        String rna_base = \"\";\n        char[] dna_base_array = dna_base.toCharArray();\n        for (int i = 0; i < dna_base.length(); i++){\n                switch (dna_base_array[i]) {\n                    case 'G':\n                        rna_base = rna_base + \"C\";\n                        break;\n                    case 'C':\n                        rna_base = rna_base + \"G\";\n                        break;\n                    case 'A':\n                        rna_base = rna_base + \"U\";\n                        break;\n                    case 'T':\n                        rna_base = rna_base + \"A\";\n                        break;                                \n                }\n        }\n        return rna_base;\n    }\n}\n","metadata":{"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"com.twosigma.beaker.javash.bkr6187abac.Transcribe"},"metadata":{}}]},{"cell_type":"code","source":"String base_dna = \"ATTACGCGCAAAC\";\nString base_rna = Transcribe.dna_to_Rna(base_dna);\n\nSystem.out.println(base_rna);\n","metadata":{"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"UAAUGCGCGUUUG\n","output_type":"stream"},{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"null"},"metadata":{}}]},{"cell_type":"markdown","source":"## Desafio 4\n\nUma empresa precisa realizar uma estatística do salário de seus funcionários.\n\nPara fins de teste, os salários devem ser gerados aleatoriamente com valores variando entre R\\\\$ 2.500 e R\\\\$ 15.000.\n\nEscreva um programa que gere uma lista contendo os salários de 50 funcionários da empresa e mostre no console quantos funcionários ganham salário acima da média.","metadata":{}},{"cell_type":"code","source":"import java.util.Random;\n\npublic class Salarios{\n    static int[] get_List(){\n        int employee_list[] = new int[50];\n        \n        Random rand = new Random();\n        \n        for (int i = 0; i < 50; i++){\n            employee_list[i] = rand.nextInt(15001);\n            if (employee_list[i] < 2500) employee_list[i] += 2500; \n        }\n        return employee_list;        \n    }\n    \n    static void get_better_paid_Employees(int employee_list[]){\n        int average = 0;\n        for (int i = 0; i < 50; i++){\n            average += employee_list[i];\n        }\n        average = average / 50;\n        \n        for (int i = 0; i < 50; i++){\n            if (employee_list[i] > average) System.out.println(employee_list[i]);\n        }\n    }\n}","metadata":{"trusted":true},"execution_count":17,"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"com.twosigma.beaker.javash.bkr6187abac.Salarios"},"metadata":{}}]},{"cell_type":"code","source":"int[] employee_list = Salarios.get_List();\nSalarios.get_better_paid_Employees(employee_list);","metadata":{"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"12797\n13453\n10013\n12014\n14541\n9825\n11836\n8671\n8721\n8986\n10443\n9670\n12809\n8889\n11923\n10375\n8430\n8131\n14259\n8095\n9781\n10163\n13710\n9276\n14685\n","output_type":"stream"},{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"null"},"metadata":{}}]}]}
