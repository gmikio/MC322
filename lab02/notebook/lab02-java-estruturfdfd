{"cells":[{"cell_type":"markdown","metadata":{},"source":["# Laboratório em Estruturas de Programação Java\n","\n","O laboratório a seguir serve para praticar estruturas de programação Java sem compromisso com a orientação a objetos."]},{"cell_type":"markdown","metadata":{},"source":["## Desafio 1 - Empréstimo\n","\n","Em um financiamento com juros compostos e número de parcelas fixas parte-se dos seguintes parâmetros:\n","* `S` - valor da primeira parcela\n","* `N` - número de parcelas\n","* `J` - percentual de juros mensal\n","\n","A primeira parcela a ser paga do financiamento é sempre igual a `S`. A partir daí é feita uma atualização mensal da parcela, em que cada nova parcela é calculada a partir da parcela do mês anterior, conforme a fórmula:\n","\n","> Parcela<sub>mês</sub> = Parcela<sub>mês-1</sub> * (1 + `J` / 100)\n","\n","O financiamento encerra quando as `N` parcelas são pagas.\n","\n","Exemplo:\n","* `S`: 200\n","* `N`: 5\n","* `J`: 1%\n","\n","Parcelas do financiamento:\n","`200`; `202`; `204.02`; `206.06`; `208.12`"]},{"cell_type":"markdown","metadata":{},"source":["### Desafio 1 / Parte 1 - Escrevendo o programa sem módulos\n","\n","Dado o problema descrito, escreva um programa que calcule as parcelas de um empréstimo para os seguintes valores:\n","* S: 200\n","* N: 5\n","* J: 1%\n","\n","Nesta versão não use outro módulo além da função principal."]},{"cell_type":"code","execution_count":4,"metadata":{"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":["200.00 202.00 204.02 206.06 208.12 "]},{"data":{"text/plain":["null"]},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":["int N = 5;\n","float S = 200, J = 1;\n","\n","System.out.format(\"%.2f \", S);\n","for (int i = 1; i < N; i++){\n","    S = S * (1 + J/100);\n","    System.out.format(\"%.2f \", S);\n","}"]},{"cell_type":"markdown","metadata":{},"source":["### Desafio 1 / Parte 2 - Escrevendo módulos\n","\n","Reescreva o código acima de forma que seu programa faça uso de uma função que seja responsável pelo cálculo de uma parcela X do empréstimo. Podem ser usadas mais funções (métodos) conforme a necessidade."]},{"cell_type":"code","execution_count":1,"metadata":{"trusted":true},"outputs":[{"data":{"text/plain":["com.twosigma.beaker.javash.bkr3bf2d791.Juros"]},"execution_count":1,"metadata":{},"output_type":"execute_result"}],"source":["public class Juros {\n","    static float proximaParcela(float parcela_anterior, float juros) {\n","        \n","        float parcela = parcela_anterior * (1+juros/100);\n","            \n","        return parcela;\n","    }        \n","}"]},{"cell_type":"code","execution_count":5,"metadata":{"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":["Parcelas do financiamento: 200; 202.00; 204.02; 206.06; 208.12; "]},{"data":{"text/plain":["null"]},"execution_count":5,"metadata":{},"output_type":"execute_result"}],"source":["int S = 200, N = 5;\n","float parcela = S, J = 1;\n","\n","System.out.format(\"Parcelas do financiamento: %.0f; \", parcela);\n","\n","for (int i = 1; i < N; i++){\n","    parcela = Juros.proximaParcela(parcela, J);\n","    System.out.format (\"%.2f; \", parcela);\n","} "]},{"cell_type":"markdown","metadata":{},"source":["## Desafio 2\n","\n","Escreva um programa que sorteie um número inteiro entre `0` e `9999` o número deve ser mostrado, em seguida convertido para binário e a versão binária deve ser apresentada no console. A conversão decimal/binário deve ser computada por um programa feito por você."]},{"cell_type":"code","execution_count":11,"metadata":{"trusted":true},"outputs":[{"data":{"text/plain":["com.twosigma.beaker.javash.bkr50f7b7ff.Convert"]},"execution_count":11,"metadata":{},"output_type":"execute_result"}],"source":["public class Convert{\n","    static void to_Binary(int decimal){\n","        int vetor[] = new int[128];\n","        int divisao_inteira = 1;\n","        \n","        int i = 0;\n","        while (decimal != 0){\n","            vetor[i] = decimal % 2;\n","            decimal = decimal / 2;\n","            i++;\n","        }\n","        i--;\n","        \n","        while (i >= 0){\n","            System.out.format(\"%d\", vetor[i]);\n","            i--;\n","        } \n","    }\n","}"]},{"cell_type":"code","execution_count":12,"metadata":{"trusted":true},"outputs":[{"name":"stdout","output_type":"stream","text":["6884\n","1101011100100"]},{"data":{"text/plain":["null"]},"execution_count":12,"metadata":{},"output_type":"execute_result"}],"source":["import java.util.Random;\n","\n","Random rand = new Random();\n","\n","int numero_aleatorio = rand.nextInt(9999);\n","System.out.format(\"%d\\n\", numero_aleatorio); \n","\n","Convert.to_Binary(numero_aleatorio); \n","\n","\n"]},{"cell_type":"markdown","metadata":{},"source":["## Desafio 3\n","\n","Uma molécula de DNA pode ser definida a partir de uma cadeia que representa a sequência de suas bases:\n","A - Adenina\n","C - Citisina\n","G - Guanina\n","T - Tinina\n","\n","Desse modo, uma string pode ser usada para representar um segmento do DNA da seguinte maneira: `ATTACGCGCAAAC`.\n","\n","Escreva uma função (método) que codifique a cadeia de RNA produzida a partir de uma cadeia de DNA. A função deve ser genérica o suficiente para ser aplicável a qualquer cadeia. A entrada é uma string (DNA) e o retorno é uma string (RNA).\n","\n","Escreva um programa que teste esta função com uma cadeia de DNA de sua escolha."]},{"cell_type":"code","execution_count":null,"metadata":{"trusted":true},"outputs":[],"source":["public class Transcribe{\n","    static String dna_to_Rna(String dna_base){\n","        String rna_base = \"\";\n","        char[] dna_base_array = dna_base.toCharArray();\n","        for (int i = 0; i < dna_base.length(); i++){\n","                switch (dna_base_array[i]) {\n","                    case 'G':\n","                        rna_base = rna_base + \"C\";\n","                        break;\n","                    case 'C':\n","                        rna_base = rna_base + \"G\";\n","                        break;\n","                    case 'A':\n","                        rna_base = rna_base + \"U\";\n","                        break;\n","                    case 'T':\n","                        rna_base = rna_base + \"A\";\n","                        break;                                \n","                }\n","        }\n","        return rna_base;\n","    }\n","}\n"]},{"cell_type":"code","execution_count":null,"metadata":{"trusted":true},"outputs":[],"source":["String base_dna = \"ATTACGCGCAAAC\";\n","String base_rna = Transcribe.dna_to_Rna(base_dna);\n","\n","System.out.println(base_rna);\n"]},{"cell_type":"markdown","metadata":{},"source":["## Desafio 4\n","\n","Uma empresa precisa realizar uma estatística do salário de seus funcionários.\n","\n","Para fins de teste, os salários devem ser gerados aleatoriamente com valores variando entre R\\\\$ 2.500 e R\\\\$ 15.000.\n","\n","Escreva um programa que gere uma lista contendo os salários de 50 funcionários da empresa e mostre no console quantos funcionários ganham salário acima da média."]},{"cell_type":"code","execution_count":null,"metadata":{"trusted":true},"outputs":[],"source":["import java.util.Random;\n","\n","public class Salarios{\n","    static int[] get_List(){\n","        int employee_list[] = new int[50];\n","        \n","        Random rand = new Random();\n","        \n","        for (int i = 0; i < 50; i++){\n","            employee_list[i] = rand.nextInt(15001);\n","            if (employee_list[i] < 2500) employee_list[i] += 2500; \n","        }\n","        return employee_list;        \n","    }\n","    \n","    static void get_better_paid_Employees(int employee_list[]){\n","        int average = 0;\n","        for (int i = 0; i < 50; i++){\n","            average += employee_list[i];\n","        }\n","        average = average / 50;\n","        \n","        for (int i = 0; i < 50; i++){\n","            if (employee_list[i] > average) System.out.println(employee_list[i]);\n","        }\n","    }\n","}"]},{"cell_type":"code","execution_count":null,"metadata":{},"outputs":[],"source":["int[] employee_list = Salarios.get_List();\n","Salarios.get_better_paid_Employees(employee_list);"]}],"metadata":{"kernelspec":{"display_name":"Java","language":"java","name":"java"},"language_info":{"codemirror_mode":"text/x-java","file_extension":".java","mimetype":"","name":"Java","nbconverter_exporter":"","version":"1.8.0_121"},"toc":{"base_numbering":1,"nav_menu":{},"number_sections":false,"sideBar":false,"skip_h1_title":false,"title_cell":"Table of Contents","title_sidebar":"Contents","toc_cell":false,"toc_position":{},"toc_section_display":false,"toc_window_display":false}},"nbformat":4,"nbformat_minor":4}
